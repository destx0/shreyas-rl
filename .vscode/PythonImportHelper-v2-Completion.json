[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.optim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.optim",
        "description": "torch.optim",
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 6,
        "importPath": "maddpg",
        "description": "maddpg",
        "peekOfCode": "class Actor(nn.Module):\n    def __init__(self, state_size, action_size, hidden_size=256):\n        super(Actor, self).__init__()\n        self.fc1 = nn.Linear(state_size, hidden_size)\n        self.fc2 = nn.Linear(hidden_size, hidden_size)\n        self.fc3 = nn.Linear(hidden_size, action_size)\n    def forward(self, state):\n        x = torch.relu(self.fc1(state))\n        x = torch.relu(self.fc2(x))\n        action = torch.tanh(self.fc3(x))",
        "detail": "maddpg",
        "documentation": {}
    },
    {
        "label": "Critic",
        "kind": 6,
        "importPath": "maddpg",
        "description": "maddpg",
        "peekOfCode": "class Critic(nn.Module):\n    def __init__(self, state_size, action_size, hidden_size=256):\n        super(Critic, self).__init__()\n        self.fc1 = nn.Linear(state_size + action_size, hidden_size)\n        self.fc2 = nn.Linear(hidden_size, hidden_size)\n        self.fc3 = nn.Linear(hidden_size, 1)\n    def forward(self, state, action):\n        x = torch.cat([state, action], dim=1)\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))",
        "detail": "maddpg",
        "documentation": {}
    },
    {
        "label": "MADDPG",
        "kind": 6,
        "importPath": "maddpg",
        "description": "maddpg",
        "peekOfCode": "class MADDPG:\n    def __init__(\n        self,\n        n_agents,\n        state_size,\n        action_size,\n        hidden_size=256,\n        gamma=0.99,\n        tau=0.01,\n        lr_actor=1e-4,",
        "detail": "maddpg",
        "documentation": {}
    }
]